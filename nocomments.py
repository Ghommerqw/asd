from collections import UserDict
from telebot import apihelper
from telebot import types
import telebot
import sqlite3

PROXY = 'whop1074:998899@45.145.232.50:61234'
apihelper.proxy = {'https': 'http://' + PROXY}

token = '5904272979:AAEPR8wJa4b-S9Tl1C_s1E_kz5rSpEBhRgs'

bot = telebot.TeleBot(token, parse_mode=None)

conn = sqlite3.connect('users.db')
c = conn.cursor()

c.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        username TEXT UNIQUE NOT NULL,
        password TEXT,
        full_name TEXT,
        class TEXT NOT NULL CHECK (class IN ('sotr', 'ok'))
    )
''')

conn.commit()

conn.close()

user_data = UserDict()

bot_data = {}

bot.user_data = {}


def check_credentials(username, password):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=?", (username,))
    result = c.fetchone()
    conn.close()
    return result is not None and (password is None or result[2] == password)


@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id

    if chat_id in bot.user_data:
        show_menu(chat_id)
        return

    bot.user_data[chat_id] = {"username": None}

    def handle_username(message):
        chat_id = message.chat.id
        username = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–µ–Ω–æ –≤–µ—Ä–Ω–æ
        if not check_credentials(username, None):
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(message, handle_username)
            return

        bot.user_data[chat_id] = {"username": username}

        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        bot.register_next_step_handler(message, handle_password)

    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    bot.register_next_step_handler(message, handle_username)


def handle_password(message):
    chat_id = message.chat.id
    password = message.text
    username = bot.user_data[chat_id]["username"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ
    if not check_credentials(username, password):
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, handle_password)
        return

    bot.user_data[chat_id]["password"] = password

    bot.send_message(chat_id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    show_menu(chat_id)


def show_menu(chat_id):
    if chat_id not in bot.user_data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –≤–≤–µ–¥—è /start.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    btn2 = types.KeyboardButton("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üìû")
    btn3 = types.KeyboardButton("–í—ã—Ö–æ–¥ üîí")
    markup.add(btn1, btn2, btn3)
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
def handle_profile(message):
    chat_id = message.chat.id
    if chat_id not in bot.user_data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –≤–≤–µ–¥—è /start.")
        return
    username = bot.user_data[chat_id]["username"]
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT full_name FROM users WHERE username=?", (username,))
    full_name = c.fetchone()[0]
    conn.close()
    bot.send_message(chat_id, f"–í–∞—à–µ –§–ò–û: \n{full_name}")


@bot.message_handler(func=lambda message: message.text == '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üìû')
def handle_contacts(message):
    chat_id = message.chat.id
    if chat_id not in bot.user_data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –≤–≤–µ–¥—è /start.")
        return
    bot.send_message(message.chat.id,
                     "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 (863) 285-61-89\n–ê–¥—Ä–µ—Å: –°—Ç–µ–ø–Ω–∞—è —É–ª., 16/1, –í–æ–ª–≥–æ–¥–æ–Ω—Å–∫\n–ù–∞—à —Å–∞–π—Ç: https://vpolesye.ru")


@bot.message_handler(func=lambda message: message.text == '–í—ã—Ö–æ–¥ üîí')
def handle_exit(message):
    chat_id = message.chat.id

    if chat_id in bot.user_data:
        del bot.user_data[chat_id]
    bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /start")


@bot.message_handler(func=lambda message: message.text == '–í—ã—Ö–æ–¥ üîí')
def logout(message):
    chat_id = message.chat.id

    if chat_id in bot_data:
        bot_data.pop(chat_id)

    if chat_id in bot.user_data:
        bot.user_data.pop(chat_id)

    logout_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    logout_markup.add(types.KeyboardButton('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚úÖ'))
    bot.send_message(chat_id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏! –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
                     reply_markup=logout_markup)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    chat_id = message.chat.id

    if chat_id not in user_data:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    username = user_data[chat_id]["username"]
    profile_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    profile_markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    bot.send_message(chat_id, f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}", reply_markup=profile_markup)


bot.polling(none_stop=True, interval=0)
conn.close()
